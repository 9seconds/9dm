#!/usr/bin/env python3
# vim: set ft=python et sw=4 ts=8:

import abc
import argparse
import contextlib
import io
import itertools
import logging
import os
import pathlib
import shelve
import sys
import textwrap
import typing as t


class Configuration:
    cli_options: argparse.Namespace

    def __init__(self, cli_options: argparse.Namespace) -> None:
        self.cli_options = cli_options

    def __str__(self) -> str:
        return str(self.cli_options)

    def __repr__(self) -> str:
        return repr(self.cli_options)

    @property
    def debug(self) -> bool:
        return t.cast(bool, self.cli_options.debug)

    @property
    def config_dir(self) -> pathlib.Path:
        return t.cast(pathlib.Path, self.cli_options.config_dir)

    @property
    def database_file(self) -> pathlib.Path:
        return self.config_dir.joinpath("db")

    @property
    def database_key(self) -> str:
        return str(self.source_dir)

    @property
    def source_dir(self) -> pathlib.Path:
        return t.cast(pathlib.Path, self.cli_options.source_dir)

    @property
    def target_dir(self) -> pathlib.Path:
        return t.cast(pathlib.Path, self.cli_options.target_dir)

    @property
    def cli_command(self) -> t.Optional["Command"]:
        return t.cast(t.Optional[Command], self.cli_options.command)

    @property
    def groups(self) -> t.Set[str]:
        return set(t.cast(t.Iterable[str], self.cli_options.group))

    @property
    def link_configuration(self) -> "LinkConfiguration":
        return LinkConfiguration(self.cli_options)


class LinkConfiguration:
    cli_options: argparse.Namespace

    def __init__(self, cli_options: argparse.Namespace):
        self.cli_options = cli_options

    @property
    def dry_run(self) -> bool:
        return t.cast(bool, self.cli_options.dry_run)

    @property
    def gc(self) -> bool:
        return t.cast(bool, not self.cli_options.no_gc)

    @property
    def clean_empty_directories(self) -> bool:
        return t.cast(bool, not self.cli_options.no_clean_empty_directories)

    @property
    def force(self) -> bool:
        return t.cast(bool, self.cli_options.force)


class Link:
    source: pathlib.Path
    destination: pathlib.Path

    def __init__(
        self,
        source: pathlib.Path,
        *,
        group_path: pathlib.Path,
        target_dir: pathlib.Path,
    ) -> None:
        self.source = source

        relative_path = self.source.relative_to(group_path)
        parts = [
            f".{part[1:]}" if part.startswith("_") else part
            for part in relative_path.parts
        ]
        relative_path = pathlib.Path(parts[0]).joinpath(*parts[1:])

        self.destination = target_dir.joinpath(*relative_path.parts)

    def __eq__(self, another) -> bool:
        return bool(
            self.__class__ is another.__class__
            and self.source == another.source
            and self.destination == another.destination
        )

    def __hash__(self) -> int:
        return hash((self.source, self.destination))

    def __str__(self) -> str:
        return f"{self.source} -> {self.destination}"

    def __repr__(self) -> str:
        return f"<Link(source={self.source}, destination={self.destination})>"


class Group:
    name: str
    path: pathlib.Path
    links: t.Set[Link]

    def __init__(
        self, name: str, *, root_path: pathlib.Path, target_dir: pathlib.Path
    ) -> None:
        self.name = name
        self.path = root_path.joinpath(name + "_")
        self.links = set()

        if not self.path.exists():
            raise ValueError(f"Path {str(self.path)} does not exist")
        if not self.path.is_dir():
            raise ValueError(f"Path {str(self.path)} is not a directory")

        for root, _, files in os.walk(self.path):
            root_path = pathlib.Path(root)
            for filename in files:
                self.links.add(
                    Link(
                        source=root_path.joinpath(filename),
                        group_path=self.path,
                        target_dir=target_dir,
                    )
                )

    def __eq__(self, another) -> bool:
        return bool(
            self.__class__ is another.__class__
            and self.name == another.name
            and self.links == another.links
        )

    def __repr__(self) -> str:
        return (
            f"<Group(name={self.name}, path={self.path}, links={self.links})>"
        )

    def __str__(self) -> str:
        stream = io.StringIO()

        print(f"{self.name} ({self.path}):", file=stream)
        if self.links:
            for link in sorted(self.links, key=lambda item: item.source):
                print(textwrap.indent(str(link), "│ "), file=stream)
        else:
            print("│ Empty", file=stream)

        return stream.getvalue().rstrip()


class Tree:
    path: pathlib.Path
    groups: t.Mapping[str, Group]

    def __init__(
        self,
        path: pathlib.Path,
        *,
        target_dir: pathlib.Path,
        groups: t.Iterable[str],
    ) -> None:
        if not path.exists():
            raise ValueError(f"Path {path} does not exist")
        if not path.is_dir():
            raise ValueError("Path {path} is not a directory")

        self.path = path
        self.groups = {
            name: Group(name, root_path=path, target_dir=target_dir)
            for name in groups
        }

    def __eq__(self, another) -> bool:
        return bool(
            self.__class__ is another.__class__
            and self.path == another.path
            and self.groups == another.groups
        )

    def __str__(self) -> str:
        stream = io.StringIO()

        print(f"{self.path}:", file=stream)
        if self.groups:
            for _, group in sorted(self.groups.items()):
                print(textwrap.indent(str(group), "    "), file=stream)
        else:
            print("    Empty", file=stream)

        return stream.getvalue().rstrip()

    def __repr__(self) -> str:
        return f"<Tree(path={self.path}, group={self.groups})>"

    @property
    def all_links(self) -> t.Set[Link]:
        return set(
            itertools.chain.from_iterable(
                gr.links for gr in self.groups.values()
            )
        )


class FileSystem:
    topdir: pathlib.Path

    def __init__(self, top_directory: pathlib.Path) -> None:
        self.topdir = top_directory

    def validate_link(self, obj: Link) -> None:
        if not obj.source.exists():
            raise ValueError(f"Source path {obj.source} does not exist")

        if not obj.destination.exists():
            return

        if not obj.destination.samefile(obj.source):
            raise ValueError(
                f"Destination {obj.destination} already "
                "exists and points to another file"
            )

    def link(self, obj: Link) -> None:
        if obj.destination.exists():
            self.unlink(obj)

        obj.destination.parent.mkdir(parents=True, exist_ok=True)
        obj.destination.symlink_to(obj.source)

    def unlink(self, obj: Link) -> None:
        with contextlib.suppress(FileNotFoundError):
            obj.destination.unlink()

    def clean_directories(self, links: t.Iterable[Link]) -> None:
        paths = sorted(
            (link.destination.parent for link in links),
            key=lambda item: len(os.fspath(item)),
            reverse=True,
        )

        for path in paths:
            current_path = path
            while current_path != self.topdir and list(current_path.iterdir()):
                logging.debug("Remove directory %s", os.fspath(current_path))
                current_path.rmdir()
                current_path = current_path.parent


class Command(metaclass=abc.ABCMeta):
    config: Configuration
    shelf: shelve.Shelf
    fs: FileSystem

    def __init__(self, config: Configuration) -> None:
        self.config = config
        self.shelf = shelve.open(str(self.config.database_file))
        self.fs = FileSystem(self.config.target_dir)

    def close(self) -> None:
        self.shelf.close()

    def get_current_tree(self) -> Tree:
        return Tree(
            path=self.config.source_dir,
            target_dir=self.config.target_dir,
            groups=self.config.groups,
        )

    def get_db_tree(self) -> Tree:
        return self.shelf.get(
            self.config.database_key,
            Tree(
                path=self.config.source_dir,
                target_dir=self.config.target_dir,
                groups=[],
            ),
        )

    @abc.abstractmethod
    def run(self) -> None:
        raise NotImplementedError()


class PrintCommand(Command):
    def run(self) -> None:
        if self.config.database_key not in self.shelf:
            print("Nothing is created yet.")
        else:
            print(str(self.get_db_tree()))


class LinkCommand(Command):
    @property
    def link_config(self) -> LinkConfiguration:
        return self.config.link_configuration

    def run(self) -> None:
        try:
            current_tree = self.get_current_tree()
        except Exception as exc:
            sys.exit(f"making current tree error: {exc}")

        db_tree = self.get_db_tree()
        links_to_create = current_tree.all_links - db_tree.all_links
        links_to_remove = db_tree.all_links - current_tree.all_links

        self.validate_links(links_to_create)
        self.create_links(links_to_create)

        if self.link_config.gc:
            self.gc(links_to_remove)

        # self.shelf[self.config.database_key] = current_tree

    def validate_links(self, links: t.Set[Link]) -> None:
        for link in links:
            try:
                self.fs.validate_link(link)
            except Exception as exc:
                logging.debug("Link %s is invalid: %s", link, exc)
                if not self.link_config.force:
                    sys.exit(f"validation error for link {link}: {exc}")
            else:
                logging.debug("Link %s is valid", link)

    def create_links(self, links: t.Set[Link]) -> None:
        for link in links:
            try:
                if not self.link_config.dry_run:
                    self.fs.link(link)
                logging.info(f"Create link {link}")
            except Exception as exc:
                sys.exit(f"error fo link {link}: {exc}")

    def gc(self, links: t.Set[Link]) -> None:
        for link in links:
            try:
                if not self.link_config.dry_run:
                    self.fs.unlink(link)
                logging.info("Removed link %s", link)
            except Exception as exc:
                sys.exit(f"error fo unmake link {link}: {exc}")

        if self.link_config.clean_empty_directories:
            self.fs.clean_directories(links)


class UnlinkCommand(LinkCommand):
    def run(self) -> None:
        db_tree = self.get_db_tree()

        links_to_delete: t.Set[Link] = set()
        for key in self.config.groups:
            if key in db_tree.groups:
                links_to_delete |= db_tree.groups.pop(key).links


class CliParser:
    parser: argparse.ArgumentParser

    DESCRIPTION_MAIN = textwrap.dedent(
        """
    9seconds' dotfiles manager.

    This is a simple tool which allows to manage symlinks to dotfiles.
    Please refer to README file at https://github.com/9seconds/9dm to get a
    detailed description. Here is a short excerpt.

    9dm has source and target. Source is a source directory where symlink
    groups are placed. Group is a directory with '_' suffix. So, if you want
    to have `git` group, just name a directory as `git_`. Contents of the
    group directory is going to be mapped to target by following rules:

    1. Directories are created, not symlinked
    2. Files are symlinked

    All files or directories with _prefix are going to be created/symlinked
    with a leading dot. For example, if you have `_config/some/_yaml.file`,
    then it is going to be symlinked as `.config/some/.yaml.file`. If you
    really need to have underscore prefix, please do not use this tool for
    this symlink.

    So, if you have a _gitconfig within a group directory, it is going to be
    symlinked to `<target>/.gitconfig`.
    \n
    9dm tracks past operations in $XDF_CONFIG_HOME/9dm/db (or
    $HOME/.config/9dm/db) file. It stores target/group mapping there. It is
    required if you want to remove some stale symlinks or relink some files
    already managed by 9dm. If 9dm meets a conflict with some unexpected
    file, it prints and stops it work. It does all validation before
    performing any operations.
    """
    ).strip()
    DESCRIPTION_LINK = textwrap.dedent(
        """
    Link groups. This is a default mode you usually want to use.

    It takes information from source directory and wire target with
    required symlinks. Also, it tracks dead links and can remove them if
    necessary.

    Dead links are tracked only within groups you pass.
    """
    ).strip()
    DESCRIPTION_UNLINK = textwrap.dedent(
        """
    Unlink groups. The opposite to link. This removes previously created
    symlinks.
    """
    ).strip()
    DESCRIPTION_PRINT = """This prints a contents of internal database."""

    class HelpFormatter(
        argparse.RawDescriptionHelpFormatter,
        argparse.ArgumentDefaultsHelpFormatter,
    ):
        pass

    def __init__(self) -> None:
        self.parser = argparse.ArgumentParser(
            description=self.DESCRIPTION_MAIN,
            formatter_class=self.HelpFormatter,
        )
        self.parser.add_argument(
            "-c",
            "--config-dir",
            help="Path to directory with app configuration",
            type=self.validate_dir,
            default=pathlib.Path(
                os.getenv(
                    "XDF_CONFIG_HOME", pathlib.Path.home().joinpath(".config")
                )
            ).joinpath("9dm"),
        )
        self.parser.add_argument(
            "-d",
            "--debug",
            help="Run in debug mode",
            action="store_true",
            default=False,
        )
        self.parser.add_argument(
            "-s",
            "--source-dir",
            help="Path to a source dir.",
            default=os.getcwd(),
            type=self.validate_dir,
        )
        self.parser.add_argument(
            "-t",
            "--target_dir",
            help="A target directory for symlinking.",
            type=self.validate_dir,
            default=pathlib.Path.home(),
        )
        self.parser.set_defaults(command=None)

        subparsers = self.parser.add_subparsers()
        link_parser = subparsers.add_parser(
            "link",
            help="Link symlink groups",
            description=self.DESCRIPTION_LINK,
            formatter_class=self.HelpFormatter,
        )
        link_parser.add_argument(
            "-n",
            "--no-gc",
            help=(
                "Do not remove orphaned links. "
                "There won't be a way how to amend that"
            ),
            action="store_true",
            default=False,
        )
        link_parser.add_argument(
            "-e",
            "--no-clean-empty-directories",
            help="Do not clean empty directories after garbage collection",
            action="store_true",
            default=False,
        )
        link_parser.add_argument(
            "-f",
            "--force",
            help="Do not hesitate to overwrite conflicts",
            action="store_true",
            default=False,
        )
        link_parser.add_argument(
            "-r",
            "--dry-run",
            help="Dry run",
            action="store_true",
            default=False,
        )
        link_parser.set_defaults(command=LinkCommand)

        unlink_parser = subparsers.add_parser(
            "unlink",
            help="Unlink symlink groups",
            description=self.DESCRIPTION_UNLINK,
            formatter_class=self.HelpFormatter,
        )
        unlink_parser.add_argument(
            "-e",
            "--no-clean-empty-directories",
            help="Do not clean empty directories after garbage collection",
            action="store_true",
            default=False,
        )
        unlink_parser.add_argument(
            "-r",
            "--dry-run",
            help="Dry run",
            action="store_true",
            default=False,
        )
        unlink_parser.set_defaults(command=UnlinkCommand)

        print_parser = subparsers.add_parser(
            "print",
            help="Print database contents",
            description=self.DESCRIPTION_PRINT,
            formatter_class=self.HelpFormatter,
        )
        print_parser.set_defaults(command=PrintCommand)

        for parser in link_parser, unlink_parser:
            parser.add_argument(
                "group",
                help=(
                    "A group to apply. "
                    "Do not forget to omit trailing underscore"
                ),
                nargs="+",
            )

    def parse(self) -> Configuration:
        return Configuration(self.parser.parse_args())

    @classmethod
    def validate_dir(cls, value: str) -> pathlib.Path:
        try:
            path = pathlib.Path(value).resolve()
        except Exception as exc:
            raise argparse.ArgumentTypeError(
                f"Incorrect path {value}: {exc}"
            ) from exc

        if not path.is_dir():
            raise argparse.ArgumentTypeError(f"Path {value} is not directory")

        return path


def main() -> None:
    config = CliParser().parse()

    if config.debug:
        logging.basicConfig(format="%(message)s", level=logging.DEBUG)
    else:
        logging.basicConfig(format="%(message)s", level=logging.INFO)

    logging.debug("Configuration: %s", config)

    config.config_dir.mkdir(parents=True, exist_ok=True)
    if not config.cli_command:
        sys.exit("Please provide a command to use")

    with contextlib.closing(config.cli_command(config)) as command:
        command.run()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
